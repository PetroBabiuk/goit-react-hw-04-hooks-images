{"version":3,"sources":["components/Searchbar/Searchbar.js","components/Button/Button.js","components/ImageGalleryItem/ImageGalleryItem.js","servises/picturesApi.js","components/ImageGallery/ImageGallery.js","components/Modal/Modal.js","App.js","index.js"],"names":["Searchbar","onSubmit","useState","inputValue","setInputValue","className","e","preventDefault","trim","toast","error","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","Button","onClick","ImageGalleryItem","images","map","image","src","webformatURL","alt","tags","id","fetchPicture","query","page","a","fetch","response","ok","json","Promise","reject","Error","ImageGallery","setImages","setError","pages","setPages","currentPage","setCurrentPage","status","setStatus","searshQuery","setSearshQuery","autoScroll","window","scrollTo","top","document","documentElement","scrollHeight","behavior","useEffect","picturesApi","then","totalHits","hits","catch","prevImages","color","height","width","message","prevPage","modalRoot","querySelector","Modal","modalImage","onClose","addEventListener","code","createPortal","target","largeImageURL","App","setQuery","showModal","setShowModal","setModalImage","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d133ddb.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({onSubmit}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = e => {\n        setInputValue(e.currentTarget.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if (inputValue.trim() === '') {\n          return toast.error('Please do not use empty string, you have to write something');\n        }\n\n        onSubmit(inputValue);\n        setInputValue('');\n    };\n\n    return (\n        <header className=\"Searchbar\">\n            <form className=\"SearchForm\" onSubmit={handleSubmit}>\n                <button type=\"submit\" className=\"SearchForm-button\">\n                    <span className=\"SearchForm-button-label\">Search</span>\n                </button>\n\n                <input\n                    className=\"SearchForm-input\"\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search images and photos\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n            </form>\n        </header>\n    );\n}\n\nSearchbar.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\n\n// class OldSearchbar extends Component {\n//     state = {\n//         inputValue: '',\n//     };\n\n    // handleInputChange = e => {\n    //     this.setState({ inputValue: e.currentTarget.value });\n    // };\n\n    // handleSubmit = e => {\n    //     e.preventDefault();\n\n    //     if (this.state.inputValue.trim() === '') {\n    //       return toast.error('Please do not use empty string, you have to write something');\n    //     }\n\n    //     this.props.onSubmit(this.state.inputValue);\n    //     this.setState({ inputValue: '' });\n    // };\n\n    \n//     render() {\n        // return (\n        //     <header className=\"Searchbar\">\n        //         <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n        //             <button type=\"submit\" className=\"SearchForm-button\">\n        //                 <span className=\"SearchForm-button-label\">Search</span>\n        //             </button>\n\n        //             <input\n        //                 className=\"SearchForm-input\"\n        //                 type=\"text\"\n        //                 autoComplete=\"off\"\n        //                 autoFocus\n        //                 placeholder=\"Search images and photos\"\n        //                 value={this.state.inputValue}\n        //                 onChange={this.handleInputChange}\n        //                 />\n        //         </form>\n        //     </header>\n        // );\n//     };\n// };\n\nexport default Searchbar;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onClick }) => (\n    <button className=\"Button\" onClick={onClick}>Load more</button>\n);\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;","import PropTypes from 'prop-types';\n\nconst ImageGalleryItem = ({ images, onClick }) => {\n    return (\n        images.map(image => (\n            <li key={image.id} className=\"ImageGalleryItem\">\n                <img onClick={() => onClick(image)} src={image.webformatURL} alt={image.tags} className=\"ImageGalleryItem-image\" />\n            </li>\n        )) \n    )\n};\n\nImageGalleryItem.propTypes = {\n    images: PropTypes.arrayOf(PropTypes.object),\n    onClick: PropTypes.func,\n};\n\nexport default ImageGalleryItem;","export default async function fetchPicture (query, page) {\n    const response = await fetch(`https://pixabay.com/api/?q=${query}&page=${page}&key=22394687-5b263f11c9e1c3bf9700990e1&image_type=photo&orientation=horizontal&per_page=12`);\n    if (response.ok) {\n        return response.json();\n    }\n    return await Promise.reject(new Error(`Sorry, but something was wrong,`));\n}","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from 'react-loader-spinner';\nimport Button from 'components/Button';\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport picturesApi from '../../servises/picturesApi';\n\nconst ImageGallery = ({ query, onClick }) => {\n    const [images, setImages] = useState([]);\n    const [error, setError] = useState(null);\n    const [pages, setPages] = useState(0);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [status, setStatus] = useState('idle');\n    const [searshQuery, setSearshQuery] = useState('');\n\n    const autoScroll = () => {\n        window.scrollTo({\n            top: document.documentElement.scrollHeight,\n            behavior: 'smooth',\n        });\n    };\n\n    const resetPage = () => {\n        setCurrentPage(1);\n        setImages([]);\n    };\n\n    useEffect(() => {\n        if (query) {\n            resetPage();\n            setStatus('pending');\n            picturesApi(query, 1).then(images => {\n                if (images.totalHits === 0) {\n                    throw new Error(`Nothing with name ${query} was not found`);\n                };\n                setSearshQuery(query);\n                setImages([...images.hits]);\n                setStatus('resolved');\n                setPages(images.totalHits / 12);\n            }).catch(error => {\n                setError(error);\n                setStatus('rejected');\n            } );\n            autoScroll();\n        }\n    }, [query]);\n\n    useEffect(() => {\n        \n        if ( currentPage > 1 && query === searshQuery) {\n            setStatus('another-pending');\n            picturesApi(query, currentPage)\n                .then(images => {\n                    setImages(prevImages => ([...prevImages, ...images.hits]));\n                    setStatus('resolved');\n            }).catch(error => {\n                setError(error);\n                setStatus('rejected');\n            } );\n            autoScroll();\n        }\n    }, [currentPage, query, searshQuery]);\n\n    if (status === 'idle') {\n            return (\n                <h1>Please, enter something</h1>\n            );\n        }\n\n        if (status === 'pending') {\n            return (\n                <Loader\n                    type=\"ThreeDots\"\n                    color=\"#3f51b5\"\n                    height={280}\n                    width={280}\n                />\n            );\n        }\n\n        if (status === 'another-pending') {\n            return (\n                <>\n                    <ul className=\"ImageGallery\">\n                        <ImageGalleryItem images={images} onClick={onClick} />\n                    </ul>\n                    <Loader\n                        type=\"ThreeDots\"\n                        color=\"#3f51b5\"\n                        height={280}\n                        width={280}\n                    />\n                </>\n            );\n        }\n\n        if (status === 'rejected') {\n            return (\n                <h1>{error.message}</h1>\n            )\n        }\n\n        if (status === 'resolved') {\n            return (\n                <>\n                    <ul className=\"ImageGallery\">\n                        <ImageGalleryItem images={images} onClick={onClick} />\n                    </ul>\n                    {pages >= currentPage ?\n                        <Button onClick={() => setCurrentPage(prevPage => prevPage + 1)} />\n                        : <></>}\n                </>\n            );\n    };\n}\n\nImageGallery.propTypes = {\n    query: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default ImageGallery;","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ modalImage, onClose }) => {\n    \n    useEffect(() => {\n        const handleKeyDown = e => {\n            if (e.code === 'Escape') {\n                onClose();\n            }\n        };\n        window.addEventListener('keydown', handleKeyDown);\n        // return window.removeEventListener('keydown', handleKeyDown);\n    },[onClose]);\n\n\n    const handleOverlayClick = e => {\n        if (e.currentTarget === e.target) {\n            onClose();\n        }\n    };\n\n    return (createPortal(<div className=\"Overlay\" onClick={handleOverlayClick}>\n        <div className=\"Modal\">\n            <img src={modalImage.largeImageURL} alt={modalImage.tags} />\n        </div>\n    </div>, modalRoot));\n    \n}\n\nModal.propTypes = {\n    modalImage: PropTypes.object.isRequired,\n    onClose: PropTypes.func.isRequired,\n}   \n\nexport default Modal;","import React, {useState} from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport './App.css';\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\nimport Modal from './components/Modal';\n\nconst App = () => {\n  const [query, setQuery] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [modalImage, setModalImage] = useState('');\n\n  const openModal = (modalImage) => {\n    setShowModal(true);\n    setModalImage(modalImage);\n  };\n  \n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  const getQuery = query => {\n    setQuery(query);\n  }\n\n  return (\n      <div>\n        {showModal && <Modal modalImage={modalImage} onClose={closeModal} />}\n        <Searchbar onSubmit={getQuery} />\n        <ImageGallery query={query} onClick={openModal} />\n        <ToastContainer />\n      </div>   \n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}